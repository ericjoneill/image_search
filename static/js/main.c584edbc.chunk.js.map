{"version":3,"sources":["components/navbar/NavBar.js","components/image-results/ImageResults.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar_default","title","ImageResults","state","open","currentImg","handleOpen","img","_this","SetState","handleClose","imageListContent","_this2","this","images","props","GridList","cols","map","tags","key","id","subtitle","user","actionIcon","IconButton_default","onClick","largeImageURL","zoom_in_default","color","src","alt","actions","FlatButton_default","label","primary","Dialog_default","modal","onRequestClose","style","width","Component","PropTypes","array","isRequired","Search","searchText","amount","apiUrl","apiKey","onTextChange","e","val","target","value","setState","Object","defineProperty","name","axios","get","concat","then","res","data","hits","catch","err","console","log","onAmountChange","index","TextField_default","onChange","floatingLabelText","fullWidth","SelectField_default","MenuItem_default","primaryText","length","image_results_ImageResults","App","MuiThemeProvider_default","navbar_NavBar","search_Search","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c584edbc.chunk.js","sourcesContent":["import React from 'react'\nimport AppBar from 'material-ui/AppBar'\n\nconst NavBar = () => <AppBar title=\"Image Finder\" />\n\nexport default NavBar;","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { GridList, GridTile } from 'material-ui/GridList'\nimport IconButton from 'material-ui/IconButton'\nimport ZoomIn from 'material-ui/svg-icons/action/zoom-in'\nimport Dialog from 'material-ui/Dialog'\nimport FlatButton from 'material-ui/FlatButton'\n\nclass ImageResults extends Component {\n    state = {\n        open: false,\n        currentImg: ''\n    }\n\n    handleOpen = img => {\n        this.SetState({open:true, currentImg: img })\n    }\n\n    handleClose = () => {\n        this.SetState({open:false})\n    }\n\n  render() {\n      let imageListContent;\n      const { images } = this.props\n\n      if(images){\n          imageListContent = (\n              <GridList cols={3}>\n              {images.map(img => (\n                  <GridTile\n                  title={img.tags}\n                  key={img.id}\n                  subtitle={\n                      <span>\n                          by <strong>{img.user}</strong>\n                          </span>\n                  }\n                  actionIcon={\n                      <IconButton onClick={() => this.handleOpen(img.largeImageURL)}>\n                          <ZoomIn color = \"white\"/>\n                          </IconButton>\n                  }\n                  >\n                  <img src={img.largeImageURL} alt = \"\"/>\n                      </GridTile>\n              ))}\n              </GridList>\n          )\n      } else{\n          imageListContent = null\n      }\n\n      const actions = [\n          <FlatButton label = \"Close\" primary={true} onClick={this.handleClose} />\n      ]\n    return (\n      <div>\n        {imageListContent}\n        <Dialog \n        actions={actions}\n        modal={false}\n        open={this.state.open}\n        onRequestClose={this.handleClose}>\n        <img src={this.state.currentImg} alt=\"\" style={{width: '100%' }} />\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nImageResults.PropTypes = {\n    images: PropTypes.array.isRequired\n}\n\nexport default ImageResults","import React, { Component } from 'react'\nimport TextField from 'material-ui/TextField'\nimport SelectField from 'material-ui/SelectField'\nimport MenuItem from 'material-ui/MenuItem';\nimport axios from 'axios'\nimport ImageResults from '../image-results/ImageResults'\n\nclass Search extends Component {\n    state = {\n        searchText: '',\n        amount: 15,\n        apiUrl: 'https://pixabay.com/api',\n        apiKey: '10322970-0fc58f3f5bd80aa742fbcac6c',\n        images: []\n    };\n\n    onTextChange = e => {\n        const val = e.target.value\n        this.setState({ [e.target.name]: val}, () => {\n            if(val === ''){\n                this.setState({images: []})\n\n            }else{\n                axios.get(`${this.state.apiUrl}/?key=${this.state.apiKey}&q=${this.state.searchText}&image_type=photo&per_page=${this.state.amount}&safesearch=true`)\n                .then(res => this.setState({images: res.data.hits}))\n                .catch(err => console.log(err));\n            }\n        });\n    };\n\n    onAmountChange = (e, index, value) => this.setState({amount: value})\n\n  render() {\n      console.log(this.state.images)\n    return (\n      <div>\n        <TextField \n        name = \"searchText\"\n        value={this.state.searchText}\n        onChange={this.onTextChange}\n        floatingLabelText=\"Search For Images\"\n        fullWidth={true}\n        />\n        <br/>\n        <SelectField\n        name=\"amount\"\n          floatingLabelText=\"Amount\"\n          value={this.state.amount}\n          onChange={this.onAmountChange}\n        >\n          <MenuItem value={5} primaryText=\"5\" />\n          <MenuItem value={10} primaryText=\"10\" />\n          <MenuItem value={15} primaryText=\"15\" />\n          <MenuItem value={30} primaryText=\"30\" />\n          <MenuItem value={50} primaryText=\"50\" />\n        </SelectField>\n        <br/>\n        {this.state.images.length > 0 ? (<ImageResults images={this.state.images} />) : null}\n      </div>\n    )\n  }\n}\n\nexport default Search;\n","import React, { Component } from 'react';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport NavBar from './components/navbar/NavBar';\nimport Search from './components/search/Search';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <MuiThemeProvider>\n        <div>\n      <NavBar />\n      <Search />\n      </div>\n      </MuiThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}